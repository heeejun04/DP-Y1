{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"7/31","provenance":[],"authorship_tag":"ABX9TyMLvumtE5cUpE/f7yeET5gt"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iGYWuSBgKi8p","executionInfo":{"status":"ok","timestamp":1659270705707,"user_tz":-540,"elapsed":344,"user":{"displayName":"Hee Jun Kim","userId":"04802893697165024810"}},"outputId":"fe34e103-f986-4b4f-8f31-0f027b57e8fa"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]"]},"metadata":{},"execution_count":1}],"source":["def factorial(n):\n","  if n == 0: return 1\n","  else: return n * factorial(n-1)\n","\n","combination = lambda n, r: int(factorial(n) / (factorial(n-r) * factorial(r)))\n","\n","pascalTriangle1 = lambda numRows: [[combination(i,j) for j in range(i+1)] for i in range(numRows)]\n","\n","pascalTriangle1(5)"]},{"cell_type":"code","source":["def pascalTriangle2(numRows):\n","  pt = []\n","  for i in range(numRows):\n","    if i == 0: pt.append([1])\n","    elif i == 1: pt.append([1, 1])\n","    else:\n","      row = []\n","      row.append(1)\n","      for j in range(i-1):\n","        row.append(pt[i-1][j] + pt[i-1][j+1])\n","      row.append(1)\n","      pt.append(row)\n","    print(pt)\n","  return pt\n","\n","pascalTriangle2(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OHU7GDJFPbXX","executionInfo":{"status":"ok","timestamp":1659271971846,"user_tz":-540,"elapsed":370,"user":{"displayName":"Hee Jun Kim","userId":"04802893697165024810"}},"outputId":"a60a142b-27b6-4c38-89b6-fad2702e1b4b"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["[[1]]\n","[[1], [1, 1]]\n","[[1], [1, 1], [1, 2, 1]]\n","[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n","[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n"]},{"output_type":"execute_result","data":{"text/plain":["[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["from collections import defaultdict\n","from math import gcd\n","from typing import DefaultDict, List, Tuple\n"," \n","IntPair = Tuple[int, int]\n"," \n"," \n","def normalized_slope(a: IntPair, b: IntPair) -> IntPair:\n","    \"\"\"\n","    Returns normalized (rise, run) tuple. We won't return the actual rise/run\n","    result in order to avoid floating point math, which leads to faulty\n","    comparisons.\n"," \n","    See\n","    https://en.wikipedia.org/wiki/Floating-point_arithmetic#Accuracy_problems\n","    \"\"\"\n","    run = b[0] - a[0]\n"," \n","    # normalize undefined slopes to (1, 0)\n","    if run == 0:\n","        return (1, 0)\n"," \n","    # normalize to left-to-right\n","    if run < 0:\n","        a, b = b, a\n","        run = b[0] - a[0]\n"," \n","    rise = b[1] - a[1]\n","    # Normalize by greatest common divisor.\n","    # math.gcd only works on positive numbers.\n","    gcd_ = gcd(abs(rise), run)\n","    return (\n","        rise // gcd_,\n","        run // gcd_,\n","    )\n"," \n"," \n","def maximum_points_on_same_line(points: List[List[int]]) -> int:\n","    # You need at least 3 points to potentially have non-collinear points.\n","    # For [0, 2] points, all points are on the same line.\n","    if len(points) < 3:\n","        return len(points)\n"," \n","    # Note that every line we find will have at least 2 points.\n","    # There will be at least one line because len(points) >= 3.\n","    # Therefore, it's safe to initialize to 0.\n","    max_val = 0\n"," \n","    for a_index in range(0, len(points) - 1):\n","        # All lines in this iteration go through point a.\n","        # Note that lines a-b and a-c cannot be parallel.\n","        # Therefore, if lines a-b and a-c have the same slope, they're the same\n","        # line.\n","        a = tuple(points[a_index])\n","        # Fresh lines already have a, so default=1\n","        slope_counts: DefaultDict[IntPair, int] = defaultdict(lambda: 1)\n"," \n","        for b_index in range(a_index + 1, len(points)):\n","            b = tuple(points[b_index])\n","            slope_counts[normalized_slope(a, b)] += 1\n"," \n","        max_val = max(\n","            max_val,\n","            max(slope_counts.values()),\n","        )\n"," \n","    return max_val\n"," \n"," \n","print(maximum_points_on_same_line([\n","    [-1, 1],\n","    [0, 0],\n","    [1, 1],\n","    [2, 2],\n","    [3, 3],\n","    [3, 4],\n","]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sHns7E4wUiKB","executionInfo":{"status":"ok","timestamp":1659273145425,"user_tz":-540,"elapsed":349,"user":{"displayName":"Hee Jun Kim","userId":"04802893697165024810"}},"outputId":"4648df12-221f-46be-ba3f-a751ea244348"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["4\n"]}]},{"cell_type":"code","source":["def checkOnLine(a, b, p):\n","  return p[1] == a * p[0] + b\n","\n","def maximalLine(points):\n","  maxNum = 0\n","  for i in range(len(points)):\n","    for j in range(i+1, len(points)):\n","      num = 0\n","      if points[i][0] != points[j][0]:\n","        for k in range(len(points)):\n","          if k != i and k != j:\n","            a = (points[i][1] - points[j][1]) / (points[i][0] - points[j][0])\n","            b = points[i][1] - a * points[i][0]\n","            if checkOnLine(a, b, points[k]): num += 1\n","      maxNum = max(maxNum, num)\n"],"metadata":{"id":"SnPyYmZka8DY","executionInfo":{"status":"ok","timestamp":1659275278851,"user_tz":-540,"elapsed":365,"user":{"displayName":"Hee Jun Kim","userId":"04802893697165024810"}}},"execution_count":7,"outputs":[]}]}